"""
Provenance Header Generator - Track generation source and metadata.

This module generates provenance headers for all generated components,
tracking pattern ID, version, timestamps, and content hashes for traceability.
"""

import hashlib
import json
from datetime import datetime, timezone
from typing import Dict, Any, Optional


class ProvenanceGenerator:
    """
    Generate provenance headers to track code generation metadata.
    """
    
    def __init__(self):
        """Initialize provenance generator."""
        self.version = "1.0.0"  # ComponentForge version
    
    def generate_header(
        self,
        pattern_id: str,
        tokens: Dict[str, Any],
        requirements: Dict[str, Any],
        component_name: Optional[str] = None
    ) -> str:
        """
        Generate provenance header comment with metadata.
        
        Args:
            pattern_id: ID of the pattern used (e.g., "shadcn-button")
            tokens: Design tokens used in generation
            requirements: Requirements implemented
            component_name: Optional custom component name
        
        Returns:
            Provenance header as a TypeScript comment block
        """
        # Generate timestamp in ISO 8601 UTC format
        timestamp = datetime.now(timezone.utc).isoformat()
        
        # Generate content hashes
        tokens_hash = self._hash_content(tokens)
        requirements_hash = self._hash_content(requirements)
        
        # Build header
        header_lines = [
            "/**",
            " * Generated by ComponentForge",
            f" * Version: {self.version}",
            f" * Pattern: {pattern_id}",
        ]
        
        if component_name:
            header_lines.append(f" * Component: {component_name}")
        
        header_lines.extend([
            f" * Generated: {timestamp}",
            f" * Tokens Hash: {tokens_hash}",
            f" * Requirements Hash: {requirements_hash}",
            " *",
            " * WARNING: This file was automatically generated.",
            " * Manual edits may be lost when regenerating.",
            " * Use ComponentForge to make changes instead.",
            " */",
            "",
            "/* eslint-disable */"
        ])

        return "\n".join(header_lines)
    
    def _hash_content(self, data: Dict[str, Any]) -> str:
        """
        Generate SHA-256 hash of content for tracking changes.
        
        Args:
            data: Dictionary to hash
        
        Returns:
            First 12 characters of SHA-256 hash (hex)
        """
        # Serialize data to JSON with sorted keys for deterministic hashing
        json_str = json.dumps(data, sort_keys=True, separators=(',', ':'))
        
        # Generate SHA-256 hash
        hash_object = hashlib.sha256(json_str.encode('utf-8'))
        hash_hex = hash_object.hexdigest()
        
        # Return first 12 characters for brevity
        return hash_hex[:12]
    
    def extract_metadata(self, header: str) -> Optional[Dict[str, str]]:
        """
        Extract provenance metadata from a header (for future regeneration).
        
        Args:
            header: Provenance header comment block
        
        Returns:
            Dictionary with extracted metadata, or None if invalid
        """
        # This will be used in Epic 8 for regeneration
        # For now, just a placeholder
        if "Generated by ComponentForge" not in header:
            return None
        
        metadata = {}
        
        # Extract key-value pairs from comment
        for line in header.split('\n'):
            line = line.strip().lstrip('*').strip()
            
            if ':' in line:
                key, value = line.split(':', 1)
                metadata[key.strip()] = value.strip()
        
        return metadata if metadata else None
