"""
Tests for Provenance Header Generator

Tests provenance header generation with metadata and hashing.
"""

import pytest
from datetime import datetime, timezone

from src.generation.provenance import ProvenanceGenerator


class TestProvenanceGenerator:
    """Test suite for ProvenanceGenerator."""
    
    @pytest.fixture
    def generator(self):
        """Create provenance generator instance."""
        return ProvenanceGenerator()
    
    @pytest.fixture
    def sample_tokens(self):
        """Sample design tokens."""
        return {
            "colors": {"primary": "#3B82F6"},
            "spacing": {"padding": "16px"}
        }
    
    @pytest.fixture
    def sample_requirements(self):
        """Sample requirements."""
        return {
            "props": [{"name": "variant", "type": "string"}],
            "events": [{"name": "onClick"}]
        }
    
    def test_generator_initialization(self, generator):
        """Test that generator initializes correctly."""
        assert generator is not None
        assert generator.version == "1.0.0"
    
    def test_generate_basic_header(self, generator, sample_tokens, sample_requirements):
        """Test generating basic provenance header."""
        header = generator.generate_header(
            pattern_id="shadcn-button",
            tokens=sample_tokens,
            requirements=sample_requirements
        )
        
        assert "Generated by ComponentForge" in header
        assert "Pattern: shadcn-button" in header
        assert "Version: 1.0.0" in header
        assert "WARNING" in header
        assert "/**" in header
        assert "*/" in header
    
    def test_header_includes_timestamp(self, generator, sample_tokens, sample_requirements):
        """Test that header includes ISO 8601 timestamp."""
        header = generator.generate_header(
            pattern_id="shadcn-button",
            tokens=sample_tokens,
            requirements=sample_requirements
        )
        
        assert "Generated:" in header
        # Should contain ISO 8601 format elements
        assert "T" in header  # Date-time separator
        assert "Z" in header or "+" in header  # UTC indicator
    
    def test_header_includes_hashes(self, generator, sample_tokens, sample_requirements):
        """Test that header includes content hashes."""
        header = generator.generate_header(
            pattern_id="shadcn-button",
            tokens=sample_tokens,
            requirements=sample_requirements
        )
        
        assert "Tokens Hash:" in header
        assert "Requirements Hash:" in header
        
        # Extract hash values
        for line in header.split('\n'):
            if "Tokens Hash:" in line:
                hash_value = line.split(':')[1].strip()
                # Should be 12 character hex string
                assert len(hash_value) == 12
                assert all(c in '0123456789abcdef' for c in hash_value)
    
    def test_hash_deterministic(self, generator):
        """Test that hashing is deterministic."""
        data = {"colors": {"primary": "#3B82F6"}, "spacing": {"padding": "16px"}}
        
        hash1 = generator._hash_content(data)
        hash2 = generator._hash_content(data)
        
        assert hash1 == hash2
    
    def test_hash_different_for_different_data(self, generator):
        """Test that different data produces different hashes."""
        data1 = {"colors": {"primary": "#3B82F6"}}
        data2 = {"colors": {"primary": "#EF4444"}}
        
        hash1 = generator._hash_content(data1)
        hash2 = generator._hash_content(data2)
        
        assert hash1 != hash2
    
    def test_hash_order_independent(self, generator):
        """Test that hash is independent of key order."""
        data1 = {"a": 1, "b": 2, "c": 3}
        data2 = {"c": 3, "a": 1, "b": 2}
        
        hash1 = generator._hash_content(data1)
        hash2 = generator._hash_content(data2)
        
        assert hash1 == hash2
    
    def test_header_with_component_name(self, generator, sample_tokens, sample_requirements):
        """Test header with custom component name."""
        header = generator.generate_header(
            pattern_id="shadcn-button",
            tokens=sample_tokens,
            requirements=sample_requirements,
            component_name="CustomButton"
        )
        
        assert "Component: CustomButton" in header
    
    def test_extract_metadata_from_header(self, generator, sample_tokens, sample_requirements):
        """Test extracting metadata from generated header."""
        header = generator.generate_header(
            pattern_id="shadcn-button",
            tokens=sample_tokens,
            requirements=sample_requirements
        )
        
        metadata = generator.extract_metadata(header)
        
        assert metadata is not None
        assert "Pattern" in metadata
        assert metadata["Pattern"] == "shadcn-button"
    
    def test_extract_metadata_invalid_header(self, generator):
        """Test that invalid header returns None."""
        invalid_header = "// Just a regular comment"
        
        metadata = generator.extract_metadata(invalid_header)
        
        assert metadata is None
    
    def test_warning_message_present(self, generator, sample_tokens, sample_requirements):
        """Test that warning about manual edits is present."""
        header = generator.generate_header(
            pattern_id="shadcn-button",
            tokens=sample_tokens,
            requirements=sample_requirements
        )
        
        assert "WARNING" in header
        assert "automatically generated" in header
        assert "Manual edits may be lost" in header
    
    def test_multiple_patterns(self, generator, sample_tokens, sample_requirements):
        """Test generating headers for different patterns."""
        patterns = ["shadcn-button", "shadcn-card", "shadcn-input"]
        
        headers = []
        for pattern_id in patterns:
            header = generator.generate_header(
                pattern_id=pattern_id,
                tokens=sample_tokens,
                requirements=sample_requirements
            )
            headers.append(header)
        
        # Each header should be unique
        assert len(set(headers)) == len(headers)
        
        # Each should reference correct pattern
        for i, pattern_id in enumerate(patterns):
            assert f"Pattern: {pattern_id}" in headers[i]
