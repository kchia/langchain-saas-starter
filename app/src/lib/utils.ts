import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

/**
 * Copy text to clipboard with fallback for older browsers
 */
export async function copyToClipboard(text: string): Promise<boolean> {
  try {
    if (navigator.clipboard && window.isSecureContext) {
      await navigator.clipboard.writeText(text);
      return true;
    } else {
      // Fallback for older browsers
      const textArea = document.createElement("textarea");
      textArea.value = text;
      textArea.style.position = "fixed";
      textArea.style.left = "-999999px";
      document.body.appendChild(textArea);
      textArea.focus();
      textArea.select();
      try {
        document.execCommand('copy');
        textArea.remove();
        return true;
      } catch (err) {
        console.error('Fallback: Could not copy text', err);
        textArea.remove();
        return false;
      }
    }
  } catch (err) {
    console.error('Failed to copy:', err);
    return false;
  }
}

/**
 * Open component code in StackBlitz (CodeSandbox alternative that works better)
 * Creates a new project with the generated component and its dependencies
 */
export function openInCodeSandbox(
  componentCode: string,
  componentName: string,
  storiesCode?: string,
  showcaseCode?: string,
  appCode?: string
): void {
  // Using StackBlitz as it has a more reliable API
  // https://developer.stackblitz.com/platform/api/javascript-sdk-options

  const packageJson = {
    name: `${componentName.toLowerCase()}-component`,
    version: '1.0.0',
    description: `Generated ${componentName} component from Component Forge`,
    scripts: {
      dev: 'vite',
      build: 'tsc && vite build',
      preview: 'vite preview'
    },
    dependencies: {
      'react': '^19.0.0',
      'react-dom': '^19.0.0',
      '@radix-ui/react-slot': '^1.1.0',
      'class-variance-authority': '^0.7.0',
      'clsx': '^2.1.0',
      'tailwind-merge': '^2.0.0',
      'lucide-react': '^0.400.0'
    },
    devDependencies: {
      '@types/react': '^19.0.0',
      '@types/react-dom': '^19.0.0',
      '@vitejs/plugin-react': '^4.0.0',
      'typescript': '^5.0.0',
      'vite': '^5.0.0',
      'tailwindcss': '^3.4.0',
      'autoprefixer': '^10.4.0',
      'postcss': '^8.4.0'
    }
  };

  const files: Record<string, string> = {
    'package.json': JSON.stringify(packageJson, null, 2),
    [`src/components/${componentName}.tsx`]: componentCode,
    // Use provided App.tsx or fallback to hardcoded preview
    'src/App.tsx': appCode || `import { ${componentName} } from './components/${componentName}';

export default function App() {
  return (
    <div className="min-h-screen p-8 bg-white">
      <div className="max-w-4xl mx-auto space-y-8">
        <div>
          <h1 className="text-3xl font-bold mb-2">${componentName} Component</h1>
          <p className="text-gray-600">Generated by Component Forge</p>
        </div>

        <div className="space-y-4">
          <h2 className="text-xl font-semibold">Preview</h2>
          <div className="p-8 border rounded-lg">
            <${componentName}>
              Example Content
            </${componentName}>
          </div>
        </div>
      </div>
    </div>
  );
}`,
    'src/main.tsx': `import { StrictMode } from 'react';
import { createRoot } from 'react-dom/client';
import App from './App';
import './index.css';

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>
);`,
    'src/index.css': `@tailwind base;
@tailwind components;
@tailwind utilities;`,
    'index.html': `<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>${componentName} - Component Forge</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>`,
    'vite.config.ts': `import { defineConfig } from 'vite';
import react from '@vitejs/plugin-react';

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      '@': '/src'
    }
  }
});`,
    'tailwind.config.js': `/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}`,
    'postcss.config.js': `export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}`,
    'tsconfig.json': JSON.stringify({
      compilerOptions: {
        target: 'ES2020',
        useDefineForClassFields: true,
        lib: ['ES2020', 'DOM', 'DOM.Iterable'],
        module: 'ESNext',
        skipLibCheck: true,
        moduleResolution: 'bundler',
        allowImportingTsExtensions: true,
        resolveJsonModule: true,
        isolatedModules: true,
        noEmit: true,
        jsx: 'react-jsx',
        strict: true,
        noUnusedLocals: true,
        noUnusedParameters: true,
        noFallthroughCasesInSwitch: true,
        paths: {
          '@/*': ['./src/*']
        }
      },
      include: ['src']
    }, null, 2),
    '.stackblitzrc': JSON.stringify({
      startCommand: 'npm run dev',
      env: {
        NODE_ENV: 'development'
      }
    }, null, 2)
  };

  // Add storybook file if provided
  if (storiesCode) {
    files[`src/components/${componentName}.stories.tsx`] = storiesCode;
  }

  // Add showcase file if provided
  if (showcaseCode) {
    files[`src/components/${componentName}.showcase.tsx`] = showcaseCode;
  }

  // Open StackBlitz using their SDK approach
  const form = document.createElement('form');
  form.method = 'POST';
  form.action = 'https://stackblitz.com/run';
  form.target = '_blank';
  form.style.display = 'none';

  // Add project data
  const projectInput = document.createElement('input');
  projectInput.type = 'hidden';
  projectInput.name = 'project[title]';
  projectInput.value = `${componentName} - Component Forge`;
  form.appendChild(projectInput);

  const descInput = document.createElement('input');
  descInput.type = 'hidden';
  descInput.name = 'project[description]';
  descInput.value = `Generated ${componentName} component from Component Forge`;
  form.appendChild(descInput);

  const templateInput = document.createElement('input');
  templateInput.type = 'hidden';
  templateInput.name = 'project[template]';
  templateInput.value = 'node';
  form.appendChild(templateInput);

  // Add all files
  Object.entries(files).forEach(([path, content]) => {
    const fileInput = document.createElement('input');
    fileInput.type = 'hidden';
    fileInput.name = `project[files][${path}]`;
    fileInput.value = content;
    form.appendChild(fileInput);
  });

  document.body.appendChild(form);
  form.submit();
  document.body.removeChild(form);
}
